#!/bin/sh
#=======================================================================
#=====                                                             =====
#=====   rung09 - Runs a gaussian job in the current directory     =====
#=====                                                             =====
#=======================================================================
#
# This shell script is used to submit a gaussian job to the
# batch facility.  Usage of rung09 is as follows:
#
# rung09 input_file [output_file]
# 
# Send any problems with or suggestions about rung09 to:
#***************************************************************************
# Dave Young
# HPC Computational Specialist
# Alabama Supercomputer Center
# 686 Discovery Dr.
# Huntsville, AL 35806
# Phone: (256) 971-7434
# email: hpc@asc.edu
#***************************************************************************

# configure script
MOAB_BIN=`cat /opt/asn/bin/torque_dir.txt`

#
#  Message of the Day
echo "This runs Gaussian in the current directory via the queue system"
echo "Report problems and post questions to the HPC staff (hpc@asc.edu)"
echo " "
pwddir=`pwd`
# if no parameters input, go to "Usage is..."
if test $# -ne 0
  then

# test for existence of data file
  if test -f $1
  then

# Call nqsquery to choose pbs parameters for calculation
# if you call with -s flag, it will list serial and route queues only
#/apps/scripts/qquery -s
#/apps/scripts/qquery 
/apps/scripts/qquery program=gaussian input=$1

if [ -f qfile ]
then
  read queue time memory sttime num_cpus < qfile
  rm qfile
else
  echo "ERROR: qfile not found"
  echo "       Make sure you have write permissions in this directory"
  exit
fi


#*********************** LOAD PREFERENCES ****************
# set defaults
job_name_pref=PROMPT
cluster_pref=PROMPT

# Read queue preferences if available.
if [ -f ~/.asc_queue ]
then
  # source preferences file
  source ~/.asc_queue
fi

# error trap for make it qsub argument
if [ "$cluster_pref" == "any" ]
then
  cluster_pref=uv:altix:dmc
fi


#**************** APPLICATION SPECIFIC *******************
# checks specific to application are put here
# For example, if they choose mutilple cpus, you could check
# that the input file has multiple cpu directive.
parallel_num_shared=`grep [Nn][Pp][Rr][Oo][Cc][Ss][Hh][Aa][Rr][Ee][Dd] $1 | tr -d ' ' | cut -c14- | head -1`
parallel_num_linda=`grep [Nn][Pp][Rr][Oo][Cc][Ll][Ii][Nn][Dd][Aa] $1 | tr -d ' ' | cut -c13- | head -1`

# set the default value
if [ $parallel_num_shared ]
then
    parallel_num=$parallel_num_shared
elif [ $parallel_num_linda ]
then

    echo "ERROR: Linda parallelization is no longer available"
    echo "       at the Alabama Supercomputer Center"
    exit

else
    parallel_num=1
fi

parallel_num=`echo $parallel_num | tr -d ' \t\f\r\n'`
#echo "checking parallel"
if test $parallel_num -ne $num_cpus
then
  echo "You requested "$num_cpus" CPUs from the queue,"
  echo "but the input file is configured for "$parallel_num" CPUs."
  echo "Change either the queue request or %NProcShared or %NProcLinda setting to match."
  exit
fi

#echo "Checking for stacksize"

# set a KMP_STACKSIZE
system_stack=`ulimit -a | grep stack | awk '{print $5}'`

if [ $system_stack == "unlimited" ]
then
  system_stack=259022
fi

# convert to MB
system_stack=`expr $system_stack / 1000`
kstack=`expr $system_stack / 4`

if test $kstack -gt 3
then
  kstack2=`expr $kstack / 4`
else
  kstack2=1
fi

kstack=${kstack}"m"
kstack2=${kstack2}"m"

#echo "Setting output file name"

if test $# -eq 2
then
  out_file=$2
else
  out_file=$1.log
fi


#echo "Generating default job name"

#
# Ask user for jobname
echo ""
def_jobname=$1"G09"
def_jobname2=`echo $def_jobname | tr -d '.' | tr -d '-' | tr -d '_' | cut -c1-14`

if [ "$job_name_pref" == "PROMPT" ]
then
  echo "Enter a name for your job (default: $def_jobname2)"
  read jobname
  if [ $jobname ]
  then
    break
  else
    jobname=$def_jobname2
  fi
elif [ "$job_name_pref" == "DEFAULT" ]
then
  jobname=$def_jobname2
  echo "The job name will be $jobname (can be changed in .asc_queue file)"
  echo
else
  jobname=$job_name_pref
  echo "The job name will be $jobname (from your .asc_queue preferences file)"
  echo
fi

# get user name
userid=`whoami`

/apps/scripts/special_queues $queue
extra_options=`cat qfile2`
rm qfile2
if [ "$extra_options" == "exit" ]
then
  exit
fi

#set_limits cpu_time num_nodes cpus_per_node memory license/NA file/NA
if [ "$num_cpus" == "1" ]
then
  limits=`/apps/scripts/set_limits $time $num_cpus NA $memory NA NA`
fi
 
if [ $parallel_num_shared ]
then
  limits=`/apps/scripts/set_limits $time NA $num_cpus $memory NA NA`
fi

# this should work on all nodes, but I use this line to force it for testing
limits=$limits",partition=uv:altix:dmc"
#limits=$limits",partition=uv"
#limits=$limits",partition=altix,host=altix7"

#echo "limits = "$limits

#
#
#
# Echo settings
echo " "
echo "============================================================"
echo "=====         Summary of your Gaussian job             ====="
echo "============================================================"
echo "  The input file is: " $1
echo "  The output file is: " $out_file
echo "  The time limit is " $time " HH:MM:SS."
echo "  The target directory is: " $pwddir
echo "  The memory limit is: " $memory
echo "  The number of CPUs is: " $num_cpus
echo "  The job will start running after: " $sttime
echo "  Look for: " $jobname " in queue: " $queue
echo " "
echo "The output file will not be placed in your directory,"
echo "until the job is complete."
echo " "
echo "Gaussian has default memory and disk use set for the small-serial queue."
echo "For other queues, set %mem and MaxDisk in your input file."
echo " "
echo -n "Job number "
# Submit the job to the proper queue.
#

#$PBS_BIN/qsub -q $queue -N $jobname -a $sttime -r n -j eo -c s -M $userid -l cput=$time,mem=$memory,ncpus=$num_cpus -W umask=022 $extra_options <<END_QSUB
$MOAB_BIN/qsub -q $queue -N $jobname -a $sttime -r n -joe -c s -M $userid $limits $extra_options <<END_QSUB
#!/bin/csh
# 
setenv job_id_num \`echo \$PBS_JOBID | cut -d. -f1\`

#  set the workdir variable
setenv uv_test \`hostname | grep uv | wc -l\`
if ( \$uv_test == "1" ) then
  echo "setting uv scratch directory"
  setenv workdir /scratch/\${PBS_O_LOGNAME}.\${PBS_JOBNAME}.\${job_id_num}
endif

#  set the workdir variable
setenv altix_test \`hostname | grep altix | wc -l\`
if ( \$altix_test == "1" ) then
  echo "setting altix scratch directory"
  setenv workdir /scratch/\${PBS_O_LOGNAME}.\${PBS_JOBNAME}.\${job_id_num}
endif 

setenv dmc_test \`hostname | grep dmc | wc -l\`
if ( \$dmc_test == "1" ) then
  echo "setting dmc scratch directory"
  setenv workdir /tmp/\${PBS_O_LOGNAME}.\${PBS_JOBNAME}.\${job_id_num}
endif

#
echo " "
echo "============================================================"
echo "=====         Summary of your Gaussian job             ====="
echo "============================================================"
echo "  The input file is: " $1
echo "  The output file is: " $out_file
echo "  The time limit is " $time " HH:MM:SS."
echo "  The target directory is: " $pwddir
echo "  The working directory is: " \$workdir
echo "  The memory limit is: " $memory
echo "  The number of CPUs is: " $num_cpus
echo "  The job will start running after: " $sttime
echo "  Look for: " $jobname " in queue: " $queue
echo " "
#st -x
#
# Execute the program
#

if ( -d \$workdir ) then
  echo "Directory \$workdir already exists"
else
  mkdir \$workdir
endif

cd \$workdir

# this was eating too much disk space
#touch \$workdir/.NOPBSERASE

# load modules
source /opt/asn/etc/asn-bash-profiles-special/modules.csh

# set configuration
if ( \$dmc_test == "1" ) then

  setenv sse_check \`cat /proc/cpuinfo | grep sse4_2 | wc -l\`

  if ( \$sse_check == "0" ) then
    echo "Runing the legacy EM64T CPU version."
    module purge
    module load gaussian/g09c01
  else
    echo "Runing the sse4_2 CPU version."
    module purge
    module load gaussian/g09c01_sse4_2
  endif

endif

if ( \$uv_test == "1" ) then

  echo "Runing the sse4_2 CPU version."
  module purge
  module load gaussian/g09c01_sse4_2

endif

if ( \$altix_test == "1" ) then
  echo "Running the IA-64 version."
  module purge
  module load gaussian/g09c01
endif


setenv GAUSS_SCRDIR \$workdir
setenv TMPDIR \$workdir
echo "g09root = "\$g09root
echo "This may give some harmless errors saying - Badly formed number."
source \$g09root/g09/bsd/g09.login

# set openmp configuration
#setenv my_node \`uname -n | grep altix.asc.edu | wc -l\`
#if ( \${my_node} > 0 ) then
#  setenv KMP_STACKSIZE $kstack2
#else
#  setenv KMP_STACKSIZE $kstack
#endif
#
#echo "KMP_STACKSIZE set to "\$KMP_STACKSIZE

if ( -d $pwddir ) then

  if ( -f $pwddir/$1 ) then
    cp $pwddir/$1 \$workdir
  else
    echo "Cant find file $pwddir/$1"
  endif

  if ( -f $pwddir/$1.chk ) then
    cp $pwddir/$1.chk \$workdir
  endif

else
  echo "Cant find directory $pwddir for input file."
endif

# DBG - for swami training
echo "gaussian" > /tmp/\${job_id_num}.swami
echo ${pwddir}/$1 >> /tmp/\${job_id_num}.swami
echo ${pwddir}/${out_file} >> /tmp/\${job_id_num}.swami

# run gaussian
# schedule on CPUs with the lowest memory latency
# .cpus file should only be found on altix
#if ( -f /tmp/\$job_id_num.cpus.taskset ) then
if ( -f /tmp/\$job_id_num.cpus ) then
  setenv taskset_cpu_list \`cat /tmp/\$job_id_num.cpus.taskset\`
  setenv dplace_cpu_list \`cat /tmp/\$job_id_num.cpus\`
  echo "using taskset with following CPU list"
  echo \$taskset_cpu_list
  #/usr/bin/taskset -c \$taskset_cpu_list \$g09root/g09/g09 < $1 > $pwddir/$out_file 
  /usr/bin/dplace -e -c\$dplace_cpu_list -s 2 \$g09root/g09/g09 < $1 > $pwddir/$out_file

else

  \$g09root/g09/g09 < $1 > $pwddir/$out_file 

endif

sleep 1

/bin/df

# return files
rm *.rwf
if ( -d $pwddir ) then

  if ( -f fort.7 ) then
    cp fort.7 $pwddir/$1.punch
  endif

  cp *.FChk $pwddir/$1.FChk
  #cp *.chk $pwddir
  cp -f *.chk $pwddir
  cp *.cube $pwddir
  cp *.off $pwddir

  cd $pwddir
  rm \$workdir/.NOPBSERASE
  rm -r \$workdir

else
  # make sure it isn't deleted in epilogue
  touch \$workdir/.NOPBSERASE

  echo "Unable to find directory $pwddir"
  echo "Promptly remove files from \$workdir"
endif

sleep 30
END_QSUB

  else
    echo "Could not find input file" $pwddir/$1 "in this directory."
    exit
  fi
else
  #echo " "
  echo " Usage is - rung09 input_file [output_file]  "
  echo " "
  echo "Input checkpoint file must be named input_file.chk"
  echo " "
fi


