#!/usr/bin/env python3

# ^^ only to get rid of omnicomplete warnings

# creating translation tables for characters
'''
>>> trans_table = str.maketrans("abc", "def")
>>> result = "aabbcc".translate(trans_table)
>>> print(result)
"ddeeff"
'''

'''
>>> trans_table = str.maketrans("78", "12", "9")
>>> value = "123456789"
>>> result = value.translate(trans_table)
>>> print(result)
12345612    # 9 has been removed
'''

# Easier strings
'''
>>> derp = "america fuck yeah"
>>> # str.format_map takes dict
>>> print("Sometimes, all I can say is {derp}".format_map(locals()))
"Sometimes, all I can say is america fuck yeah."
'''

# Flatten a list
'''
>>> a = [["a"], ["b"], ["c"]]
>>> [ i for j in a for i in j]
["a", "b", "c"]
'''

# Very simple webserver ~~~~~~~~~~~~~~~~~~~~
'''
>>> python -m http.server [port]
'''

# Classes ~~~~~~~~~~~~~~~~~~~~


class Dog:
    kind = 'canine'

    def __init__(self, name):
        self.name = name


# Higher order functions~~~~~~~~~~~~~~~

# returning a closure
# or "factory of functions"

def addn(nm):
    return lambda x: x + nm

'''
>>> add1 = addn(1)
>>> add1(2)
3
>>> addn(1)(2)
3
'''

# closures ~~~~~~~~~~~~~~~~~~~~


def startat(x):
    def incrementby(y):
        return x + y
    return incrementby

'''
>>> closure1 = startat(1)
>>> closure2 = startat(5)
>>> closure1(3)
4
>>> closure2(5)
10
'''

# Accumulator generator~~~~~~~~~~~~~~~~~~~~


class foo:
    # using a class
    def __init__(self, n):
        self.n = n

    def __call__(self, i):
        self.n = i + self.n

'''
>>> a = foo(1)
>>> a(2)
3
>>> a(5)
8
>>> a(12)
20
'''


def moop(n):
    # using a function
    def innermoop(i):
        nonlocal n
        n += i
        return n
    return innermoop
'''
>>> a = moop(2)
>>> a(4)
6
>>> a(10)
16
>>> a(4)
20
'''

# zip
'''
>>> list(zip("abcd", "123"))
[('a', '0'), ('b', '1'), ('c', '2'), ('d', '3')]
'''

# compress: takes a list and maps it onto a truth list
'''
>>> list(compress("ABCD", [0, 1, 0, 1]))
['B', 'D']
'''
